var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BackgroundModeOriginal = /** @class */ (function (_super) {
    __extends(BackgroundModeOriginal, _super);
    function BackgroundModeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundModeOriginal.prototype.enable = function () { return cordova(this, "enable", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.disable = function () { return cordova(this, "disable", {}, arguments); };
    BackgroundModeOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.isActive = function () { return cordova(this, "isActive", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.setDefaults = function (options) { return cordova(this, "setDefaults", { "platforms": ["Android"] }, arguments); };
    BackgroundModeOriginal.prototype.configure = function (options) { return cordova(this, "configure", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.on = function (event) { return cordova(this, "on", { "observable": true, "clearFunction": "un", "clearWithArgs": true }, arguments); };
    BackgroundModeOriginal.prototype.moveToBackground = function () { return cordova(this, "moveToBackground", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.disableWebViewOptimizations = function () { return cordova(this, "disableWebViewOptimizations", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.moveToForeground = function () { return cordova(this, "moveToForeground", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.overrideBackButton = function () { return cordova(this, "overrideBackButton", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.excludeFromTaskList = function () { return cordova(this, "excludeFromTaskList", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.isScreenOff = function () { return cordova(this, "isScreenOff", { "platforms": ["Android"] }, arguments); };
    BackgroundModeOriginal.prototype.wakeUp = function () { return cordova(this, "wakeUp", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.unlock = function () { return cordova(this, "unlock", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.pluginName = "BackgroundMode";
    BackgroundModeOriginal.plugin = "cordova-plugin-background-mode";
    BackgroundModeOriginal.pluginRef = "cordova.plugins.backgroundMode";
    BackgroundModeOriginal.repo = "https://github.com/katzer/cordova-plugin-background-mode";
    BackgroundModeOriginal.platforms = ["AmazonFire OS", "Android", "Browser", "iOS", "Windows"];
    return BackgroundModeOriginal;
}(IonicNativePlugin));
var BackgroundMode = new BackgroundModeOriginal();
export { BackgroundMode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhY2tncm91bmQtbW9kZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTZFRSxrQ0FBaUI7Ozs7SUFRbkQsK0JBQU07SUFPTixnQ0FBTztJQVdQLGtDQUFTO0lBV1QsaUNBQVE7SUFhUixvQ0FBVyxhQUFDLE9BQXFDO0lBYWpELGtDQUFTLGFBQUMsT0FBcUM7SUFZL0MsMkJBQUUsYUFBQyxLQUFhO0lBV2hCLHlDQUFnQjtJQVNoQixvREFBMkI7SUFTM0IseUNBQWdCO0lBU2hCLDJDQUFrQjtJQVNsQiw0Q0FBbUI7SUFTbkIsb0NBQVc7SUFXWCwrQkFBTTtJQVNOLCtCQUFNOzs7Ozs7eUJBdE9SO0VBK0VvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb25zIGl0ZW1zIHRoYXQgY2FuIGJlIHVwZGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFja2dyb3VuZE1vZGVDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIFRpdGxlIG9mIHRoZSBiYWNrZ3JvdW5kIHRhc2tcbiAgICovXG4gIHRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBvZiBiYWNrZ3JvdW5kIHRhc2tcbiAgICovXG4gIHRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBsb29rIGZvciBgPGljb24gbmFtZT4ucG5nYCBpbiBwbGF0Zm9ybXMvYW5kcm9pZC9yZXMvZHJhd2FibGV8bWlwbWFwXG4gICAqL1xuICBpY29uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIG5vdGlmaWNhdGlvbiBjaXJjbGVcbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBhcHAgd2lsbCBjb21lIHRvIGZvcmVncm91bmQgd2hlbiB0YXBwaW5nIG9uIHRoZSBub3RpZmljYXRpb24uIElmIGZhbHNlLCBwbHVnaW4gd29uJ3QgY29tZSB0byBmb3JlZ3JvdW5kIHdoZW4gdGFwcGVkLlxuICAgKi9cbiAgcmVzdW1lPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gZmFsc2UgbWFrZXMgdGhlIG5vdGlmaWNhdGlvbnMgdmlzaWJsZSBvbiBsb2NrIHNjcmVlbiAoQW5kcm9pZCA1LjArKVxuICAgKi9cbiAgaGlkZGVuPzogYm9vbGVhbjtcblxuICAvKiogQmlnIHRleHQgKi9cbiAgYmlnVGV4dD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRoYXQgc2Nyb2xscyBpdHNlbGYgb24gc3RhdHVzYmFyXG4gICAqL1xuICB0aWNrZXI/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGlmIHRydWUgcGx1Z2luIHdpbGwgbm90IGRpc3BsYXkgYSBub3RpZmljYXRpb24uIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBzaWxlbnQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIEJhY2tncm91bmQgTW9kZVxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiB0byBwcmV2ZW50IHRoZSBhcHAgZnJvbSBnb2luZyB0byBzbGVlcCB3aGlsZSBpbiBiYWNrZ3JvdW5kLlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtbW9kZS4gRm9yIG1vcmUgaW5mbyBhYm91dCBwbHVnaW4sIHZpc2l0OiBodHRwczovL2dpdGh1Yi5jb20va2F0emVyL2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtbW9kZVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYWNrZ3JvdW5kTW9kZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFja2dyb3VuZC1tb2RlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWNrZ3JvdW5kTW9kZTogQmFja2dyb3VuZE1vZGUpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuYmFja2dyb3VuZE1vZGUuZW5hYmxlKCk7XG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogQmFja2dyb3VuZE1vZGVDb25maWd1cmF0aW9uXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmFja2dyb3VuZE1vZGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLW1vZGUnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuYmFja2dyb3VuZE1vZGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2thdHplci9jb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLW1vZGUnLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uRmlyZSBPUycsICdBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kTW9kZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgYmFja2dyb3VuZCBtb2RlLlxuICAgKiBPbmNlIGNhbGxlZCwgcHJldmVudHMgdGhlIGFwcCBmcm9tIGJlaW5nIHBhdXNlZCB3aGlsZSBpbiBiYWNrZ3JvdW5kLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWVcbiAgfSlcbiAgZW5hYmxlKCk6IHZvaWQge31cblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgYmFja2dyb3VuZCBtb2RlLlxuICAgKiBPbmNlIHRoZSBiYWNrZ3JvdW5kIG1vZGUgaGFzIGJlZW4gZGlzYWJsZWQsIHRoZSBhcHAgd2lsbCBiZSBwYXVzZWQgd2hlbiBpbiBiYWNrZ3JvdW5kLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNhYmxlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBiYWNrZ3JvdW5kIG1vZGUgaXMgZW5hYmxlZCBvciBub3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm5zIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgYmFja2dyb3VuZCBtb2RlIGlzIGVuYWJsZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIGdldCB0aGUgaW5mb3JtYXRpb24gaWYgdGhlIGJhY2tncm91bmQgbW9kZSBpcyBhY3RpdmUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm5zIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgYmFja2dyb3VuZCBtb2RlIGlzIGFjdGl2ZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCB0aXRsZSwgdGlja2VyIGFuZCB0ZXh0LlxuICAgKiBBdmFpbGFibGUgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS5cbiAgICogQHBhcmFtIHtCYWNrZ3JvdW5kTW9kZUNvbmZpZ3VyYXRpb259IG9wdGlvbnMgTGlzdCBvZiBvcHRpb24gdG8gY29uZmlndXJlLiBTZWUgdGFibGUgYmVsb3dcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddXG4gIH0pXG4gIHNldERlZmF1bHRzKG9wdGlvbnM/OiBCYWNrZ3JvdW5kTW9kZUNvbmZpZ3VyYXRpb24pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb2RpZnkgdGhlIGRpc3BsYXllZCBpbmZvcm1hdGlvbi5cbiAgICogQXZhaWxhYmxlIG9ubHkgZm9yIEFuZHJvaWQgcGxhdGZvcm0uXG4gICAqIEBwYXJhbSB7QmFja2dyb3VuZE1vZGVDb25maWd1cmF0aW9ufSBbb3B0aW9uc10gQW55IG9wdGlvbnMgeW91IHdhbnQgdG8gdXBkYXRlLiBTZWUgdGFibGUgYmVsb3cuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIGNvbmZpZ3VyZShvcHRpb25zPzogQmFja2dyb3VuZE1vZGVDb25maWd1cmF0aW9uKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gZm9yIGV2ZW50cyB0aGF0IHRoZSBwbHVnaW4gZmlyZXMuIEF2YWlsYWJsZSBldmVudHMgYXJlIGBlbmFibGVgLCBgZGlzYWJsZWAsIGBhY3RpdmF0ZWAsIGBkZWFjdGl2YXRlYCBhbmQgYGZhaWx1cmVgLlxuICAgKiBAcGFyYW0gZXZlbnQge3N0cmluZ30gRXZlbnQgbmFtZVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ3VuJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlXG4gIH0pXG4gIG9uKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmRyb2lkIGFsbG93cyB0byBwcm9ncmFtbWF0aWNhbGx5IG1vdmUgZnJvbSBmb3JlZ3JvdW5kIHRvIGJhY2tncm91bmQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIG1vdmVUb0JhY2tncm91bmQoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBFbmFibGUgR1BTLXRyYWNraW5nIGluIGJhY2tncm91bmQgKEFuZHJvaWQpLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBkaXNhYmxlV2ViVmlld09wdGltaXphdGlvbnMoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBBbmRyb2lkIGFsbG93cyB0byBwcm9ncmFtbWF0aWNhbGx5IG1vdmUgZnJvbSBiYWNrZ3JvdW5kIHRvIGZvcmVncm91bmQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIG1vdmVUb0ZvcmVncm91bmQoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgYmFjayBidXR0b24gb24gQW5kcm9pZCB0byBnbyB0byBiYWNrZ3JvdW5kIGluc3RlYWQgb2YgY2xvc2luZyB0aGUgYXBwLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBvdmVycmlkZUJhY2tCdXR0b24oKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBFeGNsdWRlIHRoZSBhcHAgZnJvbSB0aGUgcmVjZW50IHRhc2sgbGlzdC4gV29ya3Mgb24gQW5kcm9pZCA1LjArLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBleGNsdWRlRnJvbVRhc2tMaXN0KCk6IHZvaWQge31cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB3b3JrcyBhc3luYyBpbnN0ZWFkIG9mIGlzQWN0aXZlKCkgb3IgaXNFbmFibGVkKCkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ11cbiAgfSlcbiAgaXNTY3JlZW5PZmYoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFR1cm4gc2NyZWVuIG9uXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIHdha2VVcCgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFR1cm4gc2NyZWVuIG9uIGFuZCBzaG93IGFwcCBldmVuIGxvY2tlZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICB1bmxvY2soKTogdm9pZCB7fVxufVxuIl19